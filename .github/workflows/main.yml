# Este script es utilizado para crear un entorno de integracion continua y despliegue continuo (CI/CD)

name: Python CI/CD pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' 

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest

      - name: Send success Slack notification
        if: success()
        uses: rtCamp/action-slack-notify@v2.3.3
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: 'CI Bot ✅'
          SLACK_TITLE: '✅ Pipeline exitoso'
          SLACK_COLOR: success
          SLACK_MESSAGE: 'El pipeline ha finalizado con el estado: ${{ job.status }}'
          SLACK_ICON_EMOJI: ':white_check_mark:'
        
      - name: Send failure Slack notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2.3.3
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: 'CI Bot ❌'
          SLACK_TITLE: '❌ Pipeline fallido'
          SLACK_COLOR: failure
          SLACK_MESSAGE: 'El pipeline ha finalizado con el estado: ${{ job.status }}'
          SLACK_ICON_EMOJI: ':rotating_light:'
  sonarcloud-scan:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Baja la totalidad del historial para sonarcloud

      - name: SonarCloud scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send success Slack notification
        if: success()
        uses: rtCamp/action-slack-notify@v2.3.3
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: 'CI Bot ✅'
          SLACK_TITLE: '✅ Pipeline sonarcloud exitoso'
          SLACK_COLOR: success
          SLACK_MESSAGE: 'El pipeline de sonarcloud ha finalizado con el estado: ${{ job.status }}'
          SLACK_ICON_EMOJI: ':white_check_mark:'
        
      - name: Send failure Slack notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2.3.3
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: 'CI Bot ❌'
          SLACK_TITLE: '❌ Pipeline sonarcloud fallido'
          SLACK_COLOR: failure
          SLACK_MESSAGE: 'El pipeline de sonarcloud ha finalizado con el estado: ${{ job.status }}'
          SLACK_ICON_EMOJI: ':rotating_light:'
  deploy:
    needs: [sonarcloud-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Render Deploy Action
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Health check of deploy action
        run: |
          echo "Esperando que el deploy se estabilice..."
          sleep 15  # opcional: dar tiempo a Render para levantar la app
          response=$curl -s -o /dev/null -w "%{http_code}" https://cicd-api.onrender.com
          if [ "$response" -ne 200 ]; then
            echo "Error: el deploy no respondió correctamente. Código HTTP: $response"
            exit 1
          else
          echo "Deploy exitoso. Código HTTP: $response"
          fi
          
      - name: Send Slack notification
        uses: ravsamhq/notify-slack-action@2.5.0
        if: always()
        with:
          status: ${{ job.status }}
          notification_title: "CD pipeline has {status_message}"
          message_format: "{emoji} *CD pipeline* {status_message} in <{repo_url}|{repo}>"
          footer: "Linked Repo <{repo_url}|{repo}> | <{workflow_url}|View Workflow>"
          notify_when: "failure,success"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TOKEN: ${{ secrets.GITHUB_TOKEN }}